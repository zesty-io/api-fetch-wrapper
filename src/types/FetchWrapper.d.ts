/**
 * Zesty.io Rest API Fetch Wrapper
 * Used to simply remote authenticated requests to the Zesty Auth, Accounts, and Instances API
 *
 * More info at https://github.com/zesty-io/websites/fetch-api-wrapper/
 */
interface OPTIONS {
    sitesServiceURL: string;
    instancesAPIURL: string;
    authAPIURL: string;
    accountsAPIURL: string;
    mediaAPIURL: string;
    logErrors: boolean;
    logResponses: boolean;
}
export default class FetchWrapper {
    private instanceZUID;
    private authToken;
    private accountsAPIEndpoints;
    private sitesServiceEndpoints;
    private instanceAPIEndpoints;
    private mediaAPIEndpoints;
    private authAPIEndpoints;
    private authAPIURL;
    private instancesAPIURL;
    private accountsAPIURL;
    private mediaAPIURL;
    private sitesServiceURL;
    private logErrors;
    private logResponses;
    constructor(instanceZUID: string, authToken: string, options?: OPTIONS);
    makeInstanceZUIDURL(url: string, zuid: string): string;
    getInstanceAPIURL(): string;
    setInstanceZUID(zuid: string): string;
    buildAPIURL(uri: string, api?: string): string;
    replaceInURL(url: string, replacementObject?: any): string;
    makeRequest(url: string, method?: string, body?: string, options?: any): Promise<any>;
    verify(): Promise<any>;
    getModels(): Promise<any>;
    getViews(): Promise<any>;
    getView(zuid: string): Promise<any>;
    createView(fileName: string, code?: string, type?: string): Promise<any>;
    updateView(viewZUID: string, code: string): Promise<any>;
    publishView(viewZUID: string, code: string): Promise<any>;
    installApp(instanceZUID: string, appZUID: string): Promise<any>;
    updateInstalledApp(instanceZUID: string, appZUID: string): Promise<any>;
    getAllInstalledApps(instanceZUID: string): Promise<any>;
    getInstalledApp(instanceZUID: string, appZUID: string): Promise<any>;
    deleteInstalledApp(instanceZUID: string, appZUID: string): Promise<any>;
    registerApp(name: string, label: string, uri: string, publisher: string): Promise<any>;
    getAllRegisterdApps(): Promise<any>;
    getRegisteredApp(appZUID: string): Promise<any>;
    updateRegisteredApp(appZUID: string): Promise<any>;
    deleteRegisteredApp(appZUID: string): Promise<any>;
    getSettings(): Promise<any>;
    updateSetting(settingZUID: string, body: any): Promise<any>;
    getFields(appZUID: string): Promise<any>;
    createInstance(name: string, ecoZUID: string): Promise<any>;
    verifyDns(domain: string, aRecord: string, cName: string): Promise<any>;
    getInstance(instanceZUID: string): Promise<any>;
    getInstances(): Promise<any>;
    getAllInvitedInstances(): Promise<any>;
    getInstanceUsers(instanceZUID: string): Promise<any>;
    getInstanceUsersWithRoles(instanceZUID: string): Promise<any>;
    getInstancePendingUsers(instanceZUID: string): Promise<any>;
    getInstanceCompanies(instanceZUID: string): Promise<any>;
    updateInstance(instanceZUID: string, params: string): Promise<any>;
    updateInstanceBlueprint(instanceZUID: string, zuid: string): Promise<any>;
    deleteInstance(instanceZUID: string): Promise<any>;
    createDomain(instanceZUID: string, domain: string): Promise<any>;
    updateDomain(instanceZUID: string, domainZUID: string, domain: string): Promise<any>;
    getDomain(instanceZUID: string, domainZUID: string): Promise<any>;
    deleteDomain(instanceZUID: string, domainZUID: string): Promise<any>;
    getAllDomain(instanceZUID: string): Promise<any>;
    getUser(userZUID: string): Promise<any>;
    getUserInstances(userZUID: string): Promise<any>;
    createUser(firstName: string, lastName: string, email: string, password: string): Promise<any>;
    updateUser(userZUID: string): Promise<any>;
    deleteUser(userZUID: string): Promise<any>;
    addUnverifiedEmail(name: string, address: string): Promise<any>;
    deleteUserEmail(email: string): Promise<any>;
    getUserEmails(): Promise<any>;
    verifyEmailAddress(address: string, verificationCode: string): Promise<any>;
    resendEmailVerification(address: string): Promise<any>;
    getCompany(companyZUID: string): Promise<any>;
    getAllCompanies(): Promise<any>;
    createCompany(name: string, description: string): Promise<any>;
    deleteCompany(companyZUID: string, firstName: string, lastName: string, email: string): Promise<any>;
    getInvite(inviteZUID: string): Promise<any>;
    getAllInvites(): Promise<any>;
    createInvite(inviteeName: string, inviteeEmail: string, entityZUID: string, accessLevel: string): Promise<any>;
    respondToInvite(inviteZUID: string, action: string): Promise<any>;
    deleteInvite(inviteZUID: string): Promise<any>;
    getBlueprint(): Promise<any>;
    getAllBlueprints(): Promise<any>;
    createBlueprint(name: string): Promise<any>;
    updateBlueprint(name: string): Promise<any>;
    deleteBlueprint(): Promise<any>;
    getInstanceBlueprint(instanceZUID: string): Promise<any>;
    getTeam(teamZUID: string): Promise<any>;
    createTeam(Name: string): Promise<any>;
    updateTeam(name: string, teamZUID: string): Promise<any>;
    deleteTeam(teamZUID: string): Promise<any>;
    getAllTeams(): Promise<any>;
    addTeamToInstance(instanceZUID: string, teamZUID: string, roleZUID: string): Promise<any>;
    getAllInstancesTeams(instanceZUID: string): Promise<any>;
    getAllTeamsInstances(teamZUID: string): Promise<any>;
    removeTeamFromInstance(instanceZUID: string, teamZUID: string): Promise<any>;
    getTeamInvite(teamInviteZUID: string): Promise<any>;
    getAllTeamInvites(): Promise<any>;
    createTeamInvite(teamZUID: string, inviteeName: string, inviteeEmail: string): Promise<any>;
    respondToTeamInvite(teamInviteZUID: string, action: string): Promise<any>;
    deleteTeamInvite(teamInviteZUID: string): Promise<any>;
    getTeamMembers(teamZUID: string): Promise<any>;
    updateTeamMembers(teamZUID: string, userZUID: string, admin?: boolean): Promise<any>;
    deleteTeamMember(teamZUID: string, userZUID: string): Promise<any>;
    getTeamMembersPending(teamZUID: string): Promise<any>;
    getInstanceRoles(instanceZUID: string): Promise<any>;
    createInstanceRoles(instanceZUID: string): Promise<any>;
    getInstanceRole(instanceZUID: string, roleZUID: string): Promise<any>;
    getRole(roleZUID: string): Promise<any>;
    deleteRole(roleZUID: string): Promise<any>;
    createRole(name: string, entityZUID: string, systemRoleZUID: string): Promise<any>;
    getRoles(): Promise<any>;
    getUserRoles(userZUID: string): Promise<any>;
    assignUserRole(userZUID: string, roleZUID: string): Promise<any>;
    deleteUserRole(userZUID: string, roleZUID: string): Promise<any>;
    updateUserRole(userZUID: string, roleZUID: string): Promise<any>;
    getGranularRole(roleZUID: string, resourceZUID: string): Promise<any>;
    deleteGranularRole(roleZUID: string, resourceZUID: string): Promise<any>;
    getAllGranularRoles(roleZUID: string): Promise<any>;
    updateGranularRoles(roleZUID: string, resourceZUID: string, name?: string, create?: boolean, read?: boolean, update?: boolean, remove?: boolean): Promise<any>;
    createGranularRole(roleZUID: string, resourceZUID: string, create?: boolean): Promise<any>;
    createEcosystem(name: string, description: string): Promise<any>;
    getEcosystem(ecosystemZUID: string): Promise<any>;
    getALLEcosystems(): Promise<any>;
    updateEcosystem(ecosystemZUID: string, name: string, description: string): Promise<any>;
    updateEcosystemDBDefaults(ecosystemZUID: string, defaultDatabaseHost?: string, defaultDatabaseUser?: string, defaultDatabasePassword?: string): Promise<any>;
    updateEcosystemCDNDefaults(ecosystemZUID: string, defaultCDNType?: string, defaultCDNPurgeURL?: string, defaultCDNPurgeAuth?: string): Promise<any>;
    deleteEcosystem(ecosystemZUID: string): Promise<any>;
    createWebhook(scopedResource: string, parentResourceZUID: string, resource: string, eventAction: number, method: string, URL: string, contentType?: string, text?: string): Promise<any>;
    retrieveWebhook(webhookZUID: string): Promise<any>;
    retrieveWebhookForInstance(instanceZUID: string): Promise<any>;
    deleteWebhook(webhookZUID: string): Promise<any>;
    createToken(roleZUID: string, name: string): Promise<any>;
    getToken(tokenZUID: string): Promise<any>;
    getInstanceToken(instanceZUID: string): Promise<any>;
    updateToken(tokenZUID: string): Promise<any>;
    deleteToken(tokenZUID: string): Promise<any>;
    searchItems(): Promise<any>;
}
export {};
