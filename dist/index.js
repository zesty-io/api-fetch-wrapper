!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Zesty=e():t.Zesty=e()}(window,(function(){return function(t){var e={};function s(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}return s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e),s.d(e,"FetchWrapper",(function(){return n}));class n{constructor(t,e,s={}){this.instanceZUID=t,this.authToken=e,this.accountsAPIEndpoints={instanceAppInstallPOST:"/instances/INSTANCE_ZUID/app-installs",instanceAppInstalls:"/instances/INSTANCE_ZUID/app-installs",instanceAppInstallGET:"/instances/INSTANCE_ZUID/app-installs/APP_ZUID",instanceAppInstallDELETE:"/instances/INSTANCE_ZUID/app-installs/APP_ZUID",userGET:"/users/USER_ZUID",apps:"/apps",appsPOST:"/apps",appsGET:"apps/APP_ZUID",appsPUT:"apps/APP_ZUID",appsDELETE:"apps/APP_ZUID",intanceDnsPOST:"/instances/dns",instanceGET:"/instances/INSTANCE_ZUID",instances:"/instances",instancesInvitedGET:"/instances/invites",instanceUserGET:"/instances/INSTANCE_ZUID/users",instanceUsersRolesGET:"/instances/INSTANCE_ZUID/users/roles",instancesPendingUsersGET:"/instances/INSTANCE_ZUID/users/pending",instancesCompaniesGET:"/instances/INSTANCE_ZUID/companies",instancePUT:"/instances/INSTANCE_ZUID",instanceBluprintPUT:"/instances/INSTANCE_ZUID/blueprints",instanceDELETE:"/instances/INSTANCE_ZUID"},this.sitesServiceEndpoints={schedulePublishPOST:"/content/items/ITEM_ZUID/publish-schedule",scheduleUnpublishPATCH:"/content/items/ITEM_ZUID/publish-schedule/PUBLISHING_ZUID",itemsDELETE:"/content/sets/MODEL_ZUID/items/ITEM_ZUID"},this.instanceAPIEndpoints={models:"/content/models",fields:"/content/models/MODEL_ZUID/fields",itemsPublishing:"/content/models/MODEL_ZUID/items/ITEM_ZUID/publishings",itemsVersions:"/content/models/MODEL_ZUID/items/ITEM_ZUID/versions",items:"/content/models/MODEL_ZUID/items",views:"/web/views",settings:"/env/settings",settingUpdate:"/env/settings/SETTING_ZUID",stylesheets:"/web/stylesheets",stylesheetsVersions:"/web/stylesheets/STYLESHEET_ZUID/versions",scriptsVersions:"/web/scripts/SCRIPT_ZUID/versions/VERSION_NUMBER",scripts:"/web/scripts",headers:"/web/headers",nav:"/env/nav",headtags:"/web/headtags",audits:"/env/audits"},this.mediaAPIEndpoints={binsGETAll:"/media-manager-service/site/SITE_ID/bins",binsGET:"/media-manager-service/bin/BIN_ID",binsPATCH:"/media-manager-service/bin/BIN_ID",filesPOST:"/media-storage-service/upload/STORAGE_DRIVER/STORAGE_NAME",filesGET:"/media-manager-service/file/FILE_ID",filesGETAll:"/media-manager-service/bin/BIN_ID/files",filesPATCH:"/media-manager-service/file/FILE_ID",filesDELETE:"/media-manager-service/file/FILE_ID",groupsGET:"/media-manager-service/group/GROUP_ID",groupsGETAll:"/media-manager-service/bin/BIN_ID/groups",groupsPOST:"/media-manager-service/group",groupsPATCH:"/media-manager-service/group/GROUP_ID",groupsDELETE:"/media-manager-service/group/GROUP_ID"},this.authAPIEndpoints={verify:"/verify"},this.authAPIURL=s.hasOwnProperty("authAPIURL")?s.authAPIURL:"https://auth.api.zesty.io",this.instancesAPIURL=s.hasOwnProperty("instancesAPIURL")?"https://"+this.instanceZUID+s.instancesAPIURL:"https://"+this.instanceZUID+".api.zesty.io/v1",this.accountsAPIURL=s.hasOwnProperty("accountsAPIURL")?s.accountsAPIURL:"https://accounts.api.zesty.io/v1",this.mediaAPIURL=s.hasOwnProperty("mediaAPIURL")?s.mediaAPIURL:"https://svc.zesty.io",this.sitesServiceURL=s.hasOwnProperty("sitesServiceURL")?s.sitesServiceURL+this.instanceZUID:"https://svc.zesty.io/sites-service/"+this.instanceZUID,this.logErrors=!!s.hasOwnProperty("logErrors")&&s.logErrors,this.logResponses=!!s.hasOwnProperty("logResponses")&&s.logResponses,this.sitesServiceURL=this.makeInstanceZUIDURL(this.sitesServiceURL,t)}makeInstanceZUIDURL(t,e){return this.replaceInURL(t,{INSTANCE_ZUID:e})}getInstanceAPIURL(){return this.instancesAPIURL}setInstanceZUID(t){return this.instanceZUID=t}buildAPIURL(t,e="instances"){switch(e){case"accounts":return`${this.accountsAPIURL}${t}`;case"instances":return`${this.instancesAPIURL}${t}`;case"sites-service":return`${this.sitesServiceURL}${t}`;case"media":return`${this.mediaAPIURL}${t}`;default:return""}}replaceInURL(t,e){for(const s in e)t=t.replace(s,e[s]);return t}async makeRequest(t,e="GET",s="",n={}){"GET"!=e&&(n.body=s),n.method=e,n.headers={"Content-Type":"application/json",Authorization:`Bearer ${this.authToken}`},n.credentials="same-origin";try{const e=await fetch(t,n);return await e.json()}catch(t){return console.error("Error:",t),t}}async verify(){let t=this.authAPIURL+this.authAPIEndpoints.verify;return await this.makeRequest(t)}async getUser(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.userGET,{USER_ZUID:t});return await this.makeRequest(e)}async getModels(){let t=this.getInstanceAPIURL()+this.instanceAPIEndpoints.models;return await this.makeRequest(t)}async getViews(){let t=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views;return await this.makeRequest(t)}async getView(t){let e=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+t;return await this.makeRequest(e)}async createView(t,e="",s="ajax-json"){let n=JSON.stringify({code:e,fileName:t,type:s}),i=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views;return await this.makeRequest(i,"POST",n)}async updateView(t,e){let s=JSON.stringify({code:e}),n=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+t;return await this.makeRequest(n,"PUT",s)}async publishView(t,e){let s=JSON.stringify({code:e}),n=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+t+"?action=publish";return await this.makeRequest(n,"PUT",s)}async installApp(t,e){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallPOST,{INSTANCE_ZUID:t}),n=JSON.stringify({appZUID:e});return await this.makeRequest(s,"POST",n)}async updateInstalledApp(t,e){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallPOST,{INSTANCE_ZUID:t}),n=JSON.stringify({appZUID:e});return await this.makeRequest(s,"PUT",n)}async getAllInstalledApps(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstalls,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async getInstalledApp(t,e){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallGET,{INSTANCE_ZUID:t,APP_ZUID:e});return await this.makeRequest(s)}async deleteInstalledApp(t,e){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallDELETE,{INSTANCE_ZUID:t,APP_ZUID:e});return await this.makeRequest(s,"DELETE")}async registerApp(t,e,s,n){let i=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsPOST),a=JSON.stringify({name:t,label:e,url:s,publisher:n});return await this.makeRequest(i,"POST",a)}async getAllRegisterdApps(){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.apps);return await this.makeRequest(t)}async getRegisteredApp(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsGET,{APP_ZUID:t});return await this.makeRequest(e)}async updateRegisteredApp(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsPUT,{APP_ZUID:t}),s=JSON.stringify({appZUID:t});return await this.makeRequest(e,"PUT",s)}async deleteRegisteredApp(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsDELETE,{APP_ZUID:t});return await this.makeRequest(e,"DELETE")}async getSettings(){let t=this.getInstanceAPIURL()+this.instanceAPIEndpoints.settings;return await this.makeRequest(t)}async updateSetting(t,e){let s=this.getInstanceAPIURL()+this.replaceInURL(this.instanceAPIEndpoints.settingUpdate,{SETTING_ZUID:t}),n=JSON.stringify(e);return await this.makeRequest(s,"PUT",n)}async getFields(t){let e=this.getInstanceAPIURL()+this.replaceInURL(this.instanceAPIEndpoints.fields,{MODEL_ZUID:t});return await this.makeRequest(e)}async createInstance(t,e){let s=JSON.stringify({name:t,ecoZUID:e}),n=this.accountsAPIURL+this.accountsAPIEndpoints.instances;return await this.makeRequest(n,"POST",s)}async verifyDns(t,e,s){let n=JSON.stringify({domain:t,aRecord:e,cName:s}),i=this.accountsAPIURL+this.accountsAPIEndpoints.intanceDnsPOST;return await this.makeRequest(i,"POST",n)}async getInstance(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceGET,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async getInstances(){let t=this.accountsAPIURL+this.accountsAPIEndpoints.instances;return await this.makeRequest(t)}async getAllInvitedInstances(){let t=this.accountsAPIURL+this.accountsAPIEndpoints.instancesInvited;return await this.makeRequest(t)}async getInstanceUsers(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceUserGET,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async getInstanceUsersWithRoles(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceUsersRolesGET,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async getInstancePendingUsers(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancesPendingUsersGET,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async getInstanceCompanies(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancesCompaniesGET,{INSTANCE_ZUID:t});return await this.makeRequest(e)}async updateInstance(t,e){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancePUT,{INSTANCE_ZUID:t})+`?action=${e}`;return await this.makeRequest(s,"PUT")}async updateInstanceBlueprint(t,e){let s=JSON.stringify({zuid:e}),n=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceBluprintPUT,{INSTANCE_ZUID:t});return await this.makeRequest(n,"PUT",s)}async deleteInstance(t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceDELETE,{INSTANCE_ZUID:t});return await this.makeRequest(e,"DELETE")}}}])}));