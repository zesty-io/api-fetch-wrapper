!function(s,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Zesty=t():s.Zesty=t()}(window,(function(){return function(s){var t={};function e(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return s[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=s,e.c=t,e.d=function(s,t,n){e.o(s,t)||Object.defineProperty(s,t,{enumerable:!0,get:n})},e.r=function(s){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},e.t=function(s,t){if(1&t&&(s=e(s)),8&t)return s;if(4&t&&"object"==typeof s&&s&&s.__esModule)return s;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:s}),2&t&&"string"!=typeof s)for(var i in s)e.d(n,i,function(t){return s[t]}.bind(null,i));return n},e.n=function(s){var t=s&&s.__esModule?function(){return s.default}:function(){return s};return e.d(t,"a",t),t},e.o=function(s,t){return Object.prototype.hasOwnProperty.call(s,t)},e.p="",e(e.s=0)}([function(s,t,e){"use strict";e.r(t),e.d(t,"FetchWrapper",(function(){return n}));class n{constructor(s,t,e={}){this.instanceZUID=s,this.authToken=t,this.accountsAPIEndpoints={instanceAppInstallPOST:"/instances/INSTANCE_ZUID/app-installs",instanceAppInstalls:"/instances/INSTANCE_ZUID/app-installs",instanceAppInstallGET:"/instances/INSTANCE_ZUID/app-installs/APP_ZUID",instanceAppInstallDELETE:"/instances/INSTANCE_ZUID/app-installs/APP_ZUID",apps:"/apps",appsPOST:"/apps",appsGET:"apps/APP_ZUID",appsPUT:"apps/APP_ZUID",appsDELETE:"apps/APP_ZUID",intanceDnsPOST:"/instances/dns",instanceGET:"/instances/INSTANCE_ZUID",instances:"/instances",instancesInvitedGET:"/instances/invites",instanceUserGET:"/instances/INSTANCE_ZUID/users",instanceUsersRolesGET:"/instances/INSTANCE_ZUID/users/roles",instancesPendingUsersGET:"/instances/INSTANCE_ZUID/users/pending",instancesCompaniesGET:"/instances/INSTANCE_ZUID/companies",instancePUT:"/instances/INSTANCE_ZUID",instanceBluprintPUT:"/instances/INSTANCE_ZUID/blueprints",instanceDELETE:"/instances/INSTANCE_ZUID",domainPOST:"/instances/INSTANCE_ZUID/domains",domainPUT:"/instances/INSTANCE_ZUID/domains/DOMAIN_ZUID",domainGET:"/instances/INSTANCE_ZUID/domains/DOMAIN_ZUID",domainDELETE:"/instances/INSTANCE_ZUID/domains/DOMAIN_ZUID",domains:"/instances/INSTANCE_ZUID/domains",userGET:"/users/USER_ZUID",userInstancesGET:"/users/USER_ZUID/instances",usersPOST:"/users",userPUT:"/users/USER_ZUID",userDELETE:"/users/USER_ZUID",usersEmailPOST:"/users/emails",usersEmailDELETE:"/users/emails",userEmailsGET:"/users/emails",userEmailVerifyGET:"/users/emails/verifications",userEmailVerifyPOST:"/users/emails/verifications",companyGET:"/companies/COMPANY_ZUID",companies:"/companies",companiesPOST:"/companies",companyDELETE:"/companies/COMPANY_ZUID"},this.sitesServiceEndpoints={schedulePublishPOST:"/content/items/ITEM_ZUID/publish-schedule",scheduleUnpublishPATCH:"/content/items/ITEM_ZUID/publish-schedule/PUBLISHING_ZUID",itemsDELETE:"/content/sets/MODEL_ZUID/items/ITEM_ZUID"},this.instanceAPIEndpoints={models:"/content/models",fields:"/content/models/MODEL_ZUID/fields",itemsPublishing:"/content/models/MODEL_ZUID/items/ITEM_ZUID/publishings",itemsVersions:"/content/models/MODEL_ZUID/items/ITEM_ZUID/versions",items:"/content/models/MODEL_ZUID/items",views:"/web/views",settings:"/env/settings",settingUpdate:"/env/settings/SETTING_ZUID",stylesheets:"/web/stylesheets",stylesheetsVersions:"/web/stylesheets/STYLESHEET_ZUID/versions",scriptsVersions:"/web/scripts/SCRIPT_ZUID/versions/VERSION_NUMBER",scripts:"/web/scripts",headers:"/web/headers",nav:"/env/nav",headtags:"/web/headtags",audits:"/env/audits"},this.mediaAPIEndpoints={binsGETAll:"/media-manager-service/site/SITE_ID/bins",binsGET:"/media-manager-service/bin/BIN_ID",binsPATCH:"/media-manager-service/bin/BIN_ID",filesPOST:"/media-storage-service/upload/STORAGE_DRIVER/STORAGE_NAME",filesGET:"/media-manager-service/file/FILE_ID",filesGETAll:"/media-manager-service/bin/BIN_ID/files",filesPATCH:"/media-manager-service/file/FILE_ID",filesDELETE:"/media-manager-service/file/FILE_ID",groupsGET:"/media-manager-service/group/GROUP_ID",groupsGETAll:"/media-manager-service/bin/BIN_ID/groups",groupsPOST:"/media-manager-service/group",groupsPATCH:"/media-manager-service/group/GROUP_ID",groupsDELETE:"/media-manager-service/group/GROUP_ID"},this.authAPIEndpoints={verify:"/verify"},this.authAPIURL=e.hasOwnProperty("authAPIURL")?e.authAPIURL:"https://auth.api.zesty.io",this.instancesAPIURL=e.hasOwnProperty("instancesAPIURL")?"https://"+this.instanceZUID+e.instancesAPIURL:"https://"+this.instanceZUID+".api.zesty.io/v1",this.accountsAPIURL=e.hasOwnProperty("accountsAPIURL")?e.accountsAPIURL:"https://accounts.api.zesty.io/v1",this.mediaAPIURL=e.hasOwnProperty("mediaAPIURL")?e.mediaAPIURL:"https://svc.zesty.io",this.sitesServiceURL=e.hasOwnProperty("sitesServiceURL")?e.sitesServiceURL+this.instanceZUID:"https://svc.zesty.io/sites-service/"+this.instanceZUID,this.logErrors=!!e.hasOwnProperty("logErrors")&&e.logErrors,this.logResponses=!!e.hasOwnProperty("logResponses")&&e.logResponses,this.sitesServiceURL=this.makeInstanceZUIDURL(this.sitesServiceURL,s)}makeInstanceZUIDURL(s,t){return this.replaceInURL(s,{INSTANCE_ZUID:t})}getInstanceAPIURL(){return this.instancesAPIURL}setInstanceZUID(s){return this.instanceZUID=s}buildAPIURL(s,t="instances"){switch(t){case"accounts":return`${this.accountsAPIURL}${s}`;case"instances":return`${this.instancesAPIURL}${s}`;case"sites-service":return`${this.sitesServiceURL}${s}`;case"media":return`${this.mediaAPIURL}${s}`;default:return""}}replaceInURL(s,t){for(const e in t)s=s.replace(e,t[e]);return s}async makeRequest(s,t="GET",e="",n={}){"GET"!=t&&(n.body=e),n.method=t,n.headers={"Content-Type":"application/json",Authorization:`Bearer ${this.authToken}`},n.credentials="same-origin";try{const t=await fetch(s,n);return await t.json()}catch(s){return console.error("Error:",s),s}}async verify(){let s=this.authAPIURL+this.authAPIEndpoints.verify;return await this.makeRequest(s)}async getModels(){let s=this.getInstanceAPIURL()+this.instanceAPIEndpoints.models;return await this.makeRequest(s)}async getViews(){let s=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views;return await this.makeRequest(s)}async getView(s){let t=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+s;return await this.makeRequest(t)}async createView(s,t="",e="ajax-json"){let n=JSON.stringify({code:t,fileName:s,type:e}),i=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views;return await this.makeRequest(i,"POST",n)}async updateView(s,t){let e=JSON.stringify({code:t}),n=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+s;return await this.makeRequest(n,"PUT",e)}async publishView(s,t){let e=JSON.stringify({code:t}),n=this.getInstanceAPIURL()+this.instanceAPIEndpoints.views+"/"+s+"?action=publish";return await this.makeRequest(n,"PUT",e)}async installApp(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallPOST,{INSTANCE_ZUID:s}),n=JSON.stringify({appZUID:t});return await this.makeRequest(e,"POST",n)}async updateInstalledApp(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallPOST,{INSTANCE_ZUID:s}),n=JSON.stringify({appZUID:t});return await this.makeRequest(e,"PUT",n)}async getAllInstalledApps(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstalls,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getInstalledApp(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallGET,{INSTANCE_ZUID:s,APP_ZUID:t});return await this.makeRequest(e)}async deleteInstalledApp(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceAppInstallDELETE,{INSTANCE_ZUID:s,APP_ZUID:t});return await this.makeRequest(e,"DELETE")}async registerApp(s,t,e,n){let i=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsPOST),a=JSON.stringify({name:s,label:t,url:e,publisher:n});return await this.makeRequest(i,"POST",a)}async getAllRegisterdApps(){let s=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.apps);return await this.makeRequest(s)}async getRegisteredApp(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsGET,{APP_ZUID:s});return await this.makeRequest(t)}async updateRegisteredApp(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsPUT,{APP_ZUID:s}),e=JSON.stringify({appZUID:s});return await this.makeRequest(t,"PUT",e)}async deleteRegisteredApp(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.appsDELETE,{APP_ZUID:s});return await this.makeRequest(t,"DELETE")}async getSettings(){let s=this.getInstanceAPIURL()+this.instanceAPIEndpoints.settings;return await this.makeRequest(s)}async updateSetting(s,t){let e=this.getInstanceAPIURL()+this.replaceInURL(this.instanceAPIEndpoints.settingUpdate,{SETTING_ZUID:s}),n=JSON.stringify(t);return await this.makeRequest(e,"PUT",n)}async getFields(s){let t=this.getInstanceAPIURL()+this.replaceInURL(this.instanceAPIEndpoints.fields,{MODEL_ZUID:s});return await this.makeRequest(t)}async createInstance(s,t){let e=JSON.stringify({name:s,ecoZUID:t}),n=this.accountsAPIURL+this.accountsAPIEndpoints.instances;return await this.makeRequest(n,"POST",e)}async verifyDns(s,t,e){let n=JSON.stringify({domain:s,aRecord:t,cName:e}),i=this.accountsAPIURL+this.accountsAPIEndpoints.intanceDnsPOST;return await this.makeRequest(i,"POST",n)}async getInstance(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceGET,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getInstances(){let s=this.accountsAPIURL+this.accountsAPIEndpoints.instances;return await this.makeRequest(s)}async getAllInvitedInstances(){let s=this.accountsAPIURL+this.accountsAPIEndpoints.instancesInvited;return await this.makeRequest(s)}async getInstanceUsers(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceUserGET,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getInstanceUsersWithRoles(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceUsersRolesGET,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getInstancePendingUsers(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancesPendingUsersGET,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getInstanceCompanies(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancesCompaniesGET,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async updateInstance(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instancePUT,{INSTANCE_ZUID:s})+`?action=${t}`;return await this.makeRequest(e,"PUT")}async updateInstanceBlueprint(s,t){let e=JSON.stringify({zuid:t}),n=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceBluprintPUT,{INSTANCE_ZUID:s});return await this.makeRequest(n,"PUT",e)}async deleteInstance(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.instanceDELETE,{INSTANCE_ZUID:s});return await this.makeRequest(t,"DELETE")}async createDomain(s,t){let e=JSON.stringify({domain:t}),n=this.accountsAPIURL+this.accountsAPIEndpoints.domainPOST;return await this.makeRequest(n,"POST",e)}async updateDomain(s,t,e){let n=JSON.stringify({domain:e}),i=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.domainPUT,{INSTANCE_ZUID:s,DOMAIN_ZUID:t});return await this.makeRequest(i,"PUT",n)}async getDomain(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.domainGET,{INSTANCE_ZUID:s,DOMAIN_ZUID:t});return await this.makeRequest(e)}async deleteDomain(s,t){let e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.domainDELETE,{INSTANCE_ZUID:s,DOMAIN_ZUID:t});return await this.makeRequest(e,"DELETE")}async getDomain(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.domains,{INSTANCE_ZUID:s});return await this.makeRequest(t)}async getUser(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.userGET,{USER_ZUID:s});return await this.makeRequest(t)}async getUserInstances(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.userInstancesGET,{USER_ZUID:s});return await this.makeRequest(t)}async createUser(s,t,e,n){let i=JSON.stringify({firstName:s,lastName:t,email:e,password:n}),a=this.accountsAPIURL+this.accountsAPIEndpoints.usersPOST;return await this.makeRequest(a,"POST",i)}async updateUser(s){let t=JSON.stringify({}),e=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.userPUT,{USER_ZUID:s})+"?action=updatePassword";return await this.makeRequest(e,"PUT",t)}async deleteUser(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.userDELETE,{USER_ZUID:s});return await this.makeRequest(t,"DELETE")}async addUnverifiedEmail(s,t){let e=JSON.stringify({name:s,address:t}),n=this.accountsAPIURL+this.accountsAPIEndpoints.usersEmailPOST;return await this.makeRequest(n,"POST",e)}async deleteUserEmail(s){let t=this.accountsAPIURL+this.accountsAPIEndpoints.usersEmailDELETE+`?address=${s}`;return await this.makeRequest(t,"DELETE")}async getUserEmails(){let s=this.accountsAPIURL+this.accountsAPIEndpoints.userEmailsGET;return await this.makeRequest(s)}async verifyEmailAddress(s,t){let e=this.accountsAPIURL+this.accountsAPIEndpoints.userEmailVerifyGET+`?address=${s}&verificationCode${t}`;return await this.makeRequest(e)}async resendEmailVerification(s){let t=JSON.stringify({}),e=this.accountsAPIURL+this.accountsAPIEndpoints.userEmailVerifyPOST+`?address=${s}`;return await this.makeRequest(e,"POST",t)}async getCompany(s){let t=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.companyGET,{COMPANY_ZUID:s});return await this.makeRequest(t)}async getAllCompanies(){let s=this.accountsAPIURL+this.accountsAPIEndpoints.companies;return await this.makeRequest(s)}async createCompany(s,t){let e=JSON.stringify({name:s,description:t}),n=this.accountsAPIURL+this.accountsAPIEndpoints.companiesPOST;return await this.makeRequest(n,"POST",e)}async deleteCompany(s,t,e,n){let i=JSON.stringify({firstName:t,lastName:e,email:n}),a=this.accountsAPIURL+this.replaceInURL(this.accountsAPIEndpoints.companyDELETE,{COMPANY_ZUID:s});return await this.makeRequest(a,"DELETE",i)}}}])}));